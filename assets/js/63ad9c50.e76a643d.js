"use strict";(self.webpackChunkwhilconn_github_io=self.webpackChunkwhilconn_github_io||[]).push([[8612],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>f});var r=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,r,l=function(t,e){if(null==t)return{};var n,r,l={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var i=r.createContext({}),c=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},s=function(t){var e=c(t.components);return r.createElement(i.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var n=t.components,l=t.mdxType,o=t.originalType,i=t.parentName,s=a(t,["components","mdxType","originalType","parentName"]),p=c(n),k=l,f=p["".concat(i,".").concat(k)]||p[k]||m[k]||o;return n?r.createElement(f,u(u({ref:e},s),{},{components:n})):r.createElement(f,u({ref:e},s))}));function f(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var o=n.length,u=new Array(o);u[0]=k;var a={};for(var i in e)hasOwnProperty.call(e,i)&&(a[i]=e[i]);a.originalType=t,a[p]="string"==typeof t?t:l,u[1]=a;for(var c=2;c<o;c++)u[c]=n[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},13379:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(87462),l=(n(67294),n(3905));const o={authors:["Whilconn"],tags:["\u6570\u7ec4","\u56de\u6eaf"],date:new Date("2022-02-26T00:00:00.000Z")},u=void 0,a={permalink:"/algorithm/2022/02/26/\u5251\u6307 Offer II 083.\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",source:"@site/algorithm/2022/02/26/\u5251\u6307 Offer II 083.\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217.md",title:"\u5251\u6307 Offer II 083.\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217",description:"1\u3001\u9898\u5e72",date:"2022-02-26T00:00:00.000Z",formattedDate:"2022\u5e742\u670826\u65e5",tags:[{label:"\u6570\u7ec4",permalink:"/algorithm/tags/\u6570\u7ec4"},{label:"\u56de\u6eaf",permalink:"/algorithm/tags/\u56de\u6eaf"}],readingTime:.985,hasTruncateMarker:!1,authors:[{name:"Whilconn",url:"https://github.com/Whilconn",key:"Whilconn"}],frontMatter:{authors:["Whilconn"],tags:["\u6570\u7ec4","\u56de\u6eaf"],date:"2022-02-26T00:00:00.000Z"},prevItem:{title:"LCR 083.\u5168\u6392\u5217",permalink:"/algorithm/2022/02/26/LCR 083.\u5168\u6392\u5217"},nextItem:{title:"537.\u590d\u6570\u4e58\u6cd5",permalink:"/algorithm/2022/02/25/537.\u590d\u6570\u4e58\u6cd5"}},i={authorsImageUrls:[void 0]},c=[{value:"1\u3001\u9898\u5e72",id:"1\u9898\u5e72",level:2},{value:"2\u3001\u89e3\u9898\u601d\u8def",id:"2\u89e3\u9898\u601d\u8def",level:2},{value:"3\u3001\u4ee3\u7801",id:"3\u4ee3\u7801",level:2}],s={toc:c};function p(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"1\u9898\u5e72"},"1\u3001\u9898\u5e72"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u6570\u5b57\u7684\u6574\u6570\u6570\u7ec4 ",(0,l.kt)("code",null,"nums")," \uff0c\u8fd4\u56de\u5176 ",(0,l.kt)("strong",null,"\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217")," \u3002\u53ef\u4ee5 ",(0,l.kt)("strong",null,"\u6309\u4efb\u610f\u987a\u5e8f")," \u8fd4\u56de\u7b54\u6848\u3002"),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"nums = [1,2,3]",(0,l.kt)("br",null),(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",(0,l.kt)("br",null)),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u793a\u4f8b 2\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"nums = [0,1]",(0,l.kt)("br",null),(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[[0,1],[1,0]]",(0,l.kt)("br",null)),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u793a\u4f8b 3\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"nums = [1]",(0,l.kt)("br",null),(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[[1]]",(0,l.kt)("br",null)),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u63d0\u793a\uff1a")),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("code",null,"1 <= nums.length <= 6")),(0,l.kt)("li",null,(0,l.kt)("code",null,"-10 <= nums[i] <= 10")),(0,l.kt)("li",null,(0,l.kt)("code",null,"nums")," \u4e2d\u7684\u6240\u6709\u6574\u6570 ",(0,l.kt)("strong",null,"\u4e92\u4e0d\u76f8\u540c"))),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("p",null,(0,l.kt)("meta",{charset:"UTF-8"}),"\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 46\xa0\u9898\u76f8\u540c\uff1a",(0,l.kt)("a",{href:"https://leetcode-cn.com/problems/permutations/"},"https://leetcode-cn.com/problems/permutations/"),"\xa0"),(0,l.kt)("h2",{id:"2\u89e3\u9898\u601d\u8def"},"2\u3001\u89e3\u9898\u601d\u8def"),(0,l.kt)("p",null,"BFS\u6bcf\u6b21\u5f80\u7ec4\u5408\u4e2d\u6dfb\u52a01\u4e2a\u6570"),(0,l.kt)("h2",{id:"3\u4ee3\u7801"},"3\u3001\u4ee3\u7801"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"var permute = function (nums) {\n    const queue = nums.map(n => [n]);\n    while (queue[0] && queue[0].length !== nums.length) {\n        const arr = queue.shift();\n        for (const n of nums) if (!arr.includes(n)) queue.push([...arr, n]);\n    }\n    return queue;\n};\n")))}p.isMDXComponent=!0}}]);