"use strict";(self.webpackChunkwhilconn_github_io=self.webpackChunkwhilconn_github_io||[]).push([[29775],{3905:(n,t,e)=>{e.d(t,{Zo:()=>m,kt:()=>g});var l=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function u(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,l)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?u(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,l,r=function(n,t){if(null==n)return{};var e,l,r={},u=Object.keys(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var a=l.createContext({}),s=function(n){var t=l.useContext(a),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},m=function(n){var t=s(n.components);return l.createElement(a.Provider,{value:t},n.children)},c="mdxType",k={inlineCode:"code",wrapper:function(n){var t=n.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(n,t){var e=n.components,r=n.mdxType,u=n.originalType,a=n.parentName,m=o(n,["components","mdxType","originalType","parentName"]),c=s(e),p=r,g=c["".concat(a,".").concat(p)]||c[p]||k[p]||u;return e?l.createElement(g,i(i({ref:t},m),{},{components:e})):l.createElement(g,i({ref:t},m))}));function g(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var u=e.length,i=new Array(u);i[0]=p;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=n,o[c]="string"==typeof n?n:r,i[1]=o;for(var s=2;s<u;s++)i[s]=e[s];return l.createElement.apply(null,i)}return l.createElement.apply(null,e)}p.displayName="MDXCreateElement"},72185:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>u,metadata:()=>o,toc:()=>s});var l=e(87462),r=(e(67294),e(3905));const u={authors:["Whilconn"],tags:["\u8bbe\u8ba1","\u6811\u72b6\u6570\u7ec4","\u7ebf\u6bb5\u6811","\u6570\u7ec4"],date:new Date("2023-11-13T00:00:00.000Z")},i=void 0,o={permalink:"/algorithm/2023/11/13/307.\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539",source:"@site/algorithm/2023/11/13/307.\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539.md",title:"307.\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539",description:"1\u3001\u9898\u5e72",date:"2023-11-13T00:00:00.000Z",formattedDate:"2023\u5e7411\u670813\u65e5",tags:[{label:"\u8bbe\u8ba1",permalink:"/algorithm/tags/\u8bbe\u8ba1"},{label:"\u6811\u72b6\u6570\u7ec4",permalink:"/algorithm/tags/\u6811\u72b6\u6570\u7ec4"},{label:"\u7ebf\u6bb5\u6811",permalink:"/algorithm/tags/\u7ebf\u6bb5\u6811"},{label:"\u6570\u7ec4",permalink:"/algorithm/tags/\u6570\u7ec4"}],readingTime:2.12,hasTruncateMarker:!1,authors:[{name:"Whilconn",url:"https://github.com/Whilconn",key:"Whilconn"}],frontMatter:{authors:["Whilconn"],tags:["\u8bbe\u8ba1","\u6811\u72b6\u6570\u7ec4","\u7ebf\u6bb5\u6811","\u6570\u7ec4"],date:"2023-11-13T00:00:00.000Z"},prevItem:{title:"20.\u6709\u6548\u7684\u62ec\u53f7",permalink:"/algorithm/2023/11/13/20.\u6709\u6548\u7684\u62ec\u53f7"},nextItem:{title:"2300.\u5492\u8bed\u548c\u836f\u6c34\u7684\u6210\u529f\u5bf9\u6570",permalink:"/algorithm/2023/11/10/2300.\u5492\u8bed\u548c\u836f\u6c34\u7684\u6210\u529f\u5bf9\u6570"}},a={authorsImageUrls:[void 0]},s=[{value:"1\u3001\u9898\u5e72",id:"1\u9898\u5e72",level:2},{value:"2\u3001\u601d\u8def",id:"2\u601d\u8def",level:2},{value:"3\u3001\u4ee3\u7801",id:"3\u4ee3\u7801",level:2}],m={toc:s};function c(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,l.Z)({},m,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1\u9898\u5e72"},"1\u3001\u9898\u5e72"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 ",(0,r.kt)("code",null,"nums")," \uff0c\u8bf7\u4f60\u5b8c\u6210\u4e24\u7c7b\u67e5\u8be2\u3002"),(0,r.kt)("ol",null,(0,r.kt)("li",null,"\u5176\u4e2d\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42 ",(0,r.kt)("strong",null,"\u66f4\u65b0")," \u6570\u7ec4\xa0",(0,r.kt)("code",null,"nums"),"\xa0\u4e0b\u6807\u5bf9\u5e94\u7684\u503c"),(0,r.kt)("li",null,"\u53e6\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42\u8fd4\u56de\u6570\u7ec4\xa0",(0,r.kt)("code",null,"nums"),"\xa0\u4e2d\u7d22\u5f15\xa0",(0,r.kt)("code",null,"left"),"\xa0\u548c\u7d22\u5f15\xa0",(0,r.kt)("code",null,"right"),"\xa0\u4e4b\u95f4\uff08\xa0",(0,r.kt)("strong",null,"\u5305\u542b\xa0"),"\uff09\u7684nums\u5143\u7d20\u7684 ",(0,r.kt)("strong",null,"\u548c"),"\xa0\uff0c\u5176\u4e2d\xa0",(0,r.kt)("code",null,"left <= right"))),(0,r.kt)("p",null,"\u5b9e\u73b0 ",(0,r.kt)("code",null,"NumArray")," \u7c7b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"NumArray(int[] nums)")," \u7528\u6574\u6570\u6570\u7ec4 ",(0,r.kt)("code",null,"nums")," \u521d\u59cb\u5316\u5bf9\u8c61"),(0,r.kt)("li",null,(0,r.kt)("code",null,"void update(int index, int val)")," \u5c06 ",(0,r.kt)("code",null,"nums[index]")," \u7684\u503c ",(0,r.kt)("strong",null,"\u66f4\u65b0")," \u4e3a ",(0,r.kt)("code",null,"val")),(0,r.kt)("li",null,(0,r.kt)("code",null,"int sumRange(int left, int right)")," \u8fd4\u56de\u6570\u7ec4\xa0",(0,r.kt)("code",null,"nums"),"\xa0\u4e2d\u7d22\u5f15\xa0",(0,r.kt)("code",null,"left"),"\xa0\u548c\u7d22\u5f15\xa0",(0,r.kt)("code",null,"right"),"\xa0\u4e4b\u95f4\uff08\xa0",(0,r.kt)("strong",null,"\u5305\u542b\xa0"),"\uff09\u7684nums\u5143\u7d20\u7684 ",(0,r.kt)("strong",null,"\u548c"),"\xa0\uff08\u5373\uff0c",(0,r.kt)("code",null,"nums[left] + nums[left + 1], ..., nums[right]"),"\uff09")),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165"),"\uff1a",(0,r.kt)("br",null),'["NumArray", "sumRange", "update", "sumRange"]',(0,r.kt)("br",null),"[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]",(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u8f93\u51fa"),"\uff1a",(0,r.kt)("br",null),"[null, 9, null, 8]",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u89e3\u91ca"),"\uff1a",(0,r.kt)("br",null),"NumArray numArray = new NumArray([1, 3, 5]);",(0,r.kt)("br",null),"numArray.sumRange(0, 2); // \u8fd4\u56de 1 + 3 + 5 = 9",(0,r.kt)("br",null),"numArray.update(1, 2);   // nums = [1,2,5]",(0,r.kt)("br",null),"numArray.sumRange(0, 2); // \u8fd4\u56de 1 + 2 + 5 = 8",(0,r.kt)("br",null)),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u63d0\u793a\uff1a")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"1 <= nums.length <= 3 *\xa010",(0,r.kt)("sup",null,"4"))),(0,r.kt)("li",null,(0,r.kt)("code",null,"-100 <= nums[i] <= 100")),(0,r.kt)("li",null,(0,r.kt)("code",null,"0 <= index < nums.length")),(0,r.kt)("li",null,(0,r.kt)("code",null,"-100 <= val <= 100")),(0,r.kt)("li",null,(0,r.kt)("code",null,"0 <= left <= right < nums.length")),(0,r.kt)("li",null,"\u8c03\u7528 ",(0,r.kt)("code",null,"update")," \u548c ",(0,r.kt)("code",null,"sumRange")," \u65b9\u6cd5\u6b21\u6570\u4e0d\u5927\u4e8e\xa0",(0,r.kt)("code",null,"3 * 10",(0,r.kt)("sup",null,"4")),"\xa0")),(0,r.kt)("h2",{id:"2\u601d\u8def"},"2\u3001\u601d\u8def"),(0,r.kt)("p",null,"\u6811\u72b6\u6570\u7ec4"),(0,r.kt)("h2",{id:"3\u4ee3\u7801"},"3\u3001\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-TypeScript",metastring:"[]","[]":!0},"class NumArray {\n    treeNums = [];\n\n    constructor(nums: number[]) {\n        const sums = new Array(nums.length + 1).fill(0);\n        this.treeNums = new Array(nums.length + 1).fill(0);\n\n        for (let i = 1; i < sums.length; i++) {\n            sums[i] = nums[i - 1] + sums[i - 1];\n            this.treeNums[i] = sums[i] - sums[i - this.lowbit(i)];\n        }\n    }\n\n    lowbit(i: number) {\n        return i & -i;\n    }\n\n    sum(r: number) {\n        let ans = 0;\n\n        while (r > 0) {\n            ans += this.treeNums[r];\n            r = r - this.lowbit(r);\n        }\n\n        return ans;\n    }\n\n    update(i: number, val: number): void {\n        const d = val - this.sumRange(i, i);\n\n        i += 1;\n        while (i < this.treeNums.length) {\n            this.treeNums[i] += d;\n            i = i + this.lowbit(i);\n        }\n    }\n\n    sumRange(left: number, right: number): number {\n        left += 1, right += 1;\n        return this.sum(right) - this.sum(left - 1);\n    }\n}\n")))}c.isMDXComponent=!0}}]);