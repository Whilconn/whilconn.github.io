"use strict";(self.webpackChunkwhilconn_github_io=self.webpackChunkwhilconn_github_io||[]).push([[32174],{3905:(n,t,e)=>{e.d(t,{Zo:()=>c,kt:()=>g});var l=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function u(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,l)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?u(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,l,r=function(n,t){if(null==n)return{};var e,l,r={},u=Object.keys(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var i=l.createContext({}),s=function(n){var t=l.useContext(i),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},c=function(n){var t=s(n.components);return l.createElement(i.Provider,{value:t},n.children)},m="mdxType",p={inlineCode:"code",wrapper:function(n){var t=n.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(n,t){var e=n.components,r=n.mdxType,u=n.originalType,i=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),m=s(e),k=r,g=m["".concat(i,".").concat(k)]||m[k]||p[k]||u;return e?l.createElement(g,a(a({ref:t},c),{},{components:e})):l.createElement(g,a({ref:t},c))}));function g(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var u=e.length,a=new Array(u);a[0]=k;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=n,o[m]="string"==typeof n?n:r,a[1]=o;for(var s=2;s<u;s++)a[s]=e[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,e)}k.displayName="MDXCreateElement"},60405:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>s});var l=e(87462),r=(e(67294),e(3905));const u={authors:["Whilconn"],tags:["\u6570\u7ec4","\u54c8\u5e0c\u8868"],date:new Date("2023-11-06T00:00:00.000Z")},a=void 0,o={permalink:"/algorithm/2023/11/06/2475.\u6570\u7ec4\u4e2d\u4e0d\u7b49\u4e09\u5143\u7ec4\u7684\u6570\u76ee",source:"@site/algorithm/2023/11/06/2475.\u6570\u7ec4\u4e2d\u4e0d\u7b49\u4e09\u5143\u7ec4\u7684\u6570\u76ee.md",title:"2475.\u6570\u7ec4\u4e2d\u4e0d\u7b49\u4e09\u5143\u7ec4\u7684\u6570\u76ee",description:"1\u3001\u9898\u5e72",date:"2023-11-06T00:00:00.000Z",formattedDate:"2023\u5e7411\u67086\u65e5",tags:[{label:"\u6570\u7ec4",permalink:"/algorithm/tags/\u6570\u7ec4"},{label:"\u54c8\u5e0c\u8868",permalink:"/algorithm/tags/\u54c8\u5e0c\u8868"}],readingTime:2.47,hasTruncateMarker:!1,authors:[{name:"Whilconn",url:"https://github.com/Whilconn",key:"Whilconn"}],frontMatter:{authors:["Whilconn"],tags:["\u6570\u7ec4","\u54c8\u5e0c\u8868"],date:"2023-11-06T00:00:00.000Z"},prevItem:{title:"2609.\u6700\u957f\u5e73\u8861\u5b50\u5b57\u7b26\u4e32",permalink:"/algorithm/2023/11/08/2609.\u6700\u957f\u5e73\u8861\u5b50\u5b57\u7b26\u4e32"},nextItem:{title:"117.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II",permalink:"/algorithm/2023/11/03/117.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II"}},i={authorsImageUrls:[void 0]},s=[{value:"1\u3001\u9898\u5e72",id:"1\u9898\u5e72",level:2},{value:"2\u3001\u601d\u8def",id:"2\u601d\u8def",level:2},{value:"3\u3001\u4ee3\u7801",id:"3\u4ee3\u7801",level:2}],c={toc:s};function m(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,l.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1\u9898\u5e72"},"1\u3001\u9898\u5e72"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece ",(0,r.kt)("strong",null,"0")," \u5f00\u59cb\u7684\u6b63\u6574\u6570\u6570\u7ec4 ",(0,r.kt)("code",null,"nums")," \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u7edf\u8ba1\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u4e09\u5143\u7ec4 ",(0,r.kt)("code",null,"(i, j, k)")," \u7684\u6570\u76ee\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"0 <= i < j < k < nums.length")),(0,r.kt)("li",null,(0,r.kt)("code",null,"nums[i]"),"\u3001",(0,r.kt)("code",null,"nums[j]")," \u548c ",(0,r.kt)("code",null,"nums[k]")," ",(0,r.kt)("strong",null,"\u4e24\u4e24\u4e0d\u540c")," \u3002",(0,r.kt)("ul",null,(0,r.kt)("li",null,"\u6362\u53e5\u8bdd\u8bf4\uff1a",(0,r.kt)("code",null,"nums[i] != nums[j]"),"\u3001",(0,r.kt)("code",null,"nums[i] != nums[k]")," \u4e14 ",(0,r.kt)("code",null,"nums[j] != nums[k]")," \u3002")))),(0,r.kt)("p",null,"\u8fd4\u56de\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u4e09\u5143\u7ec4\u7684\u6570\u76ee",(0,r.kt)("em",null,"\u3002")),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165\uff1a"),"nums = [4,4,2,4,3]",(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u8f93\u51fa\uff1a"),"3",(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u4e0b\u9762\u5217\u51fa\u7684\u4e09\u5143\u7ec4\u5747\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\uff1a",(0,r.kt)("br",null),"- (0, 2, 4) \u56e0\u4e3a 4 != 2 != 3",(0,r.kt)("br",null),"- (1, 2, 4) \u56e0\u4e3a 4 != 2 != 3",(0,r.kt)("br",null),"- (2, 3, 4) \u56e0\u4e3a 2 != 4 != 3",(0,r.kt)("br",null),"\u5171\u8ba1 3 \u4e2a\u4e09\u5143\u7ec4\uff0c\u8fd4\u56de 3 \u3002",(0,r.kt)("br",null),"\u6ce8\u610f (2, 0, 4) \u4e0d\u662f\u6709\u6548\u7684\u4e09\u5143\u7ec4\uff0c\u56e0\u4e3a 2 > 0 \u3002",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 2\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165\uff1a"),"nums = [1,1,1,1,1]",(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u8f93\u51fa\uff1a"),"0",(0,r.kt)("br",null),(0,r.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4\uff0c\u6240\u4ee5\u8fd4\u56de 0 \u3002",(0,r.kt)("br",null)),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u63d0\u793a\uff1a")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"3 <= nums.length <= 100")),(0,r.kt)("li",null,(0,r.kt)("code",null,"1 <= nums[i] <= 1000"))),(0,r.kt)("h2",{id:"2\u601d\u8def"},"2\u3001\u601d\u8def"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u679a\u4e3e\uff1a3\u91cd\u5faa\u73af\u679a\u4e3e\u6240\u6709\u4e0d\u7b49\u4e09\u5143\u7ec4"),(0,r.kt)("li",{parentName:"ul"},"\u54c8\u5e0c\u8868\uff1a\u5bf9\u6570\u7ec4\u6240\u6709\u5143\u7d20\u8ba1\u6570\uff0c\u679a\u4e3e\u7d2f\u8ba1\u6240\u6709\u4e0d\u7b49\u4e09\u5143\u7ec4")),(0,r.kt)("h2",{id:"3\u4ee3\u7801"},"3\u3001\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Rust",metastring:"[]","[]":!0},"use std::collections::HashMap;\n\nimpl Solution {\n    pub fn unequal_triplets(nums: Vec<i32>) -> i32 {\n        let len = nums.len();\n        let mut map = HashMap::new();\n        for n in nums {\n            let c = map.entry(n).or_insert(0);\n            *c += 1;\n        }\n\n        let mut ans = 0;\n        let mut pc = 0;\n        for (k, c) in map {\n            ans += pc * c * (len - pc - c);\n            pc += c;\n        }\n\n        return ans as i32;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-TypeScript",metastring:"[]","[]":!0},"function unequalTriplets(nums: number[]): number {\n    const map = new Map<number, number>();\n    for (let i = 0; i < nums.length; i++) {\n        map.set(nums[i], (map.get(nums[i]) || 0) + 1);\n    }\n\n    let ans = 0, pc = 0;\n\n    for (const [_, c] of map) {\n        ans += pc * c * (nums.length - pc - c);\n        pc += c;\n    }\n\n    return ans;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-TypeScript",metastring:"[]","[]":!0},"function unequalTriplets(nums: number[]): number {\n    let ans = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            for (let k = j + 1; k < nums.length; k++) {\n                if (nums[i] !== nums[j] && nums[i] !== nums[k] && nums[j] !== nums[k]) ans += 1;\n            }\n        }\n    }\n\n    return ans;\n};\n")))}m.isMDXComponent=!0}}]);